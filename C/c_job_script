
#######################################################################
#                  System Environment Variables
#######################################################################

umask 022


rm -f *.exe
max=4
SECONDS=0


echo '--------------------------------------------------'
echo 'gcc - Cleaning CSV Files'
echo '--------------------------------------------------'

gcc resetCSV.c -o resetCSV.exe

./resetCSV.exe


echo '--------------------------------------------------'
echo 'gcc - Matrix Copy: Regular'
echo '--------------------------------------------------'

gcc test_copy_matrix.c -o test_copy_matrix-gcr.exe

for i in `seq 2 $max`
do
    ./test_copy_matrix-gcr.exe 5000
    ./test_copy_matrix-gcr.exe 7000
    ./test_copy_matrix-gcr.exe 9000
done

echo '--------------------------------------------------'
echo 'gcc - Matrix Copy: Optimized'
echo '--------------------------------------------------'

gcc -Ofast test_copy_matrix.c -o test_copy_matrix-gco.exe
#gcc -O3 -march=native -mfpmath=sse test_copy_matrix.c -o test_copy_matrix-gco.exe

for i in `seq 2 $max`
do
    ./test_copy_matrix-gco.exe 5000
    ./test_copy_matrix-gco.exe 7000
    ./test_copy_matrix-gco.exe 9000
done

echo '--------------------------------------------------'
echo 'gcc - Look and Say: Regular'
echo '--------------------------------------------------'

gcc test_look_and_say.c -o test_look_and_say-gcr.exe -lm
for i in `seq 2 $max`
do
    ./test_look_and_say-gcr.exe 40
    ./test_look_and_say-gcr.exe 45
    ./test_look_and_say-gcr.exe 48
done

echo '--------------------------------------------------'
echo 'gcc - Look and Say: Optimized'
echo '--------------------------------------------------'

gcc -Ofast test_look_and_say.c -o test_look_and_say-gco.exe -lm

for i in `seq 2 $max`
do
    ./test_look_and_say-gco.exe 40
    ./test_look_and_say-gco.exe 45
    ./test_look_and_say-gco.exe 48
done

echo '--------------------------------------------------'
echo 'gcc - Fibonacci: Regular'
echo '--------------------------------------------------'

gcc test_fibonacci.c -o test_fibonacci-gcr.exe -lm

for i in `seq 2 $max`
do
    ./test_fibonacci-gcr.exe 25
    ./test_fibonacci-gcr.exe 35
    ./test_fibonacci-gcr.exe 45
done

echo '--------------------------------------------------'
echo 'gcc - Fobonacci: Optimized'
echo '--------------------------------------------------'

gcc -Ofast test_fibonacci.c -o test_fibonacci-gco.exe -lm
#gcc -O3 -march=native -mfpmath=sse test_fibonacci.c -o test_fibonacci-gco.exe -lm

for i in `seq 2 $max`
do
    ./test_fibonacci-gco.exe 25
    ./test_fibonacci-gco.exe 35
    ./test_fibonacci-gco.exe 45
done


echo '--------------------------------------------------'
echo 'gcc - Matrix Multiplication: Regular'
echo '--------------------------------------------------'

gcc test_matrix_multiplication.c -o test_matrix_multiplication-gcr.exe

for i in `seq 2 $max`
do
    ./test_matrix_multiplication-gcr.exe 1500 1500 1500
    ./test_matrix_multiplication-gcr.exe 1750 1750 1750
    ./test_matrix_multiplication-gcr.exe 2000 2000 2000
done

echo '----------------------------------------------------'
echo 'gcc - Matrix Multiplication: Optimized'
echo '----------------------------------------------------'

gcc -Ofast test_matrix_multiplication.c -o test_matrix_multiplication-gco.exe
#gcc -O3 -march=native -mfpmath=sse test_matrix_multiplication.c -o test_matrix_multiplication-gco.exe

for i in `seq 2 $max`
do
    ./test_matrix_multiplication-gco.exe 1500 1500 1500
    ./test_matrix_multiplication-gco.exe 1750 1750 1750
    ./test_matrix_multiplication-gco.exe 2000 2000 2000
done

echo '--------------------------------------------------'
echo 'gcc - Evaluate Functions: Regular'
echo '--------------------------------------------------'

gcc test_evaluate_functions.c -o test_evaluate_functions-gcr.exe -lm

for i in `seq 2 $max`
do    
    ./test_evaluate_functions-gcr.exe 80000
    ./test_evaluate_functions-gcr.exe 90000
    ./test_evaluate_functions-gcr.exe 100000
done

echo '--------------------------------------------------'
echo 'gcc - Evaluate Functions: Optimized'
echo '--------------------------------------------------'

gcc -Ofast test_evaluate_functions.c -o test_evaluate_functions-gco.exe -lm

for i in `seq 2 $max`
do
    ./test_evaluate_functions-gco.exe 80000
    ./test_evaluate_functions-gco.exe 90000
    ./test_evaluate_functions-gco.exe 100000
done

echo '--------------------------------------------------'
echo 'gcc - Belief: Regular'
echo '--------------------------------------------------'

gcc test_belief_propagation.c -o test_belief_propagation-gcr.exe -lm

for i in `seq 2 $max`
do
    ./test_belief_propagation-gcr.exe 250
    ./test_belief_propagation-gcr.exe 500
    ./test_belief_propagation-gcr.exe 1000
done


echo '--------------------------------------------------'
echo 'gcc - Belief: Optimized'
echo '--------------------------------------------------'

gcc -Ofast test_belief_propagation.c -o test_belief_propagation-gco.exe -lm

for i in `seq 2 $max`
do
    ./test_belief_propagation-gco.exe 250
    ./test_belief_propagation-gco.exe 500
    ./test_belief_propagation-gco.exe 1000
done

echo '--------------------------------------------------'
echo 'gcc - Markov Chain: Regular'
echo '--------------------------------------------------'

gcc test_markov_chain.c -o test_markov_chain-gcr.exe -lm

for i in `seq 2 $max`
do
    ./test_markov_chain-gcr.exe 5000
    ./test_markov_chain-gcr.exe 10000
    ./test_markov_chain-gcr.exe 15000
done

echo '----------------------------------------------------'
echo 'gcc - Markov Chain: Optimized'
echo '----------------------------------------------------'

gcc -Ofast test_markov_chain.c -o test_markov_chain-gco.exe -lm

for i in `seq 2 $max`
do
    ./test_markov_chain-gco.exe 5000
    ./test_markov_chain-gco.exe 10000
    ./test_markov_chain-gco.exe 15000
done

echo '----------------------------------------------------'
echo 'gcc - Fourth-order Laplace: Regular'
echo '----------------------------------------------------'

gcc test_laplace_jacobi_4.c -o test_laplace_jacobi_4-gcr.exe -lm

for i in `seq 2 $max`
do
    ./test_laplace_jacobi_4-gcr.exe 100
    ./test_laplace_jacobi_4-gcr.exe 150
    ./test_laplace_jacobi_4-gcr.exe 200
done

echo '----------------------------------------------------'
echo 'gcc - Fourth-order Laplace: Optimized'
echo '----------------------------------------------------'

gcc -Ofast test_laplace_jacobi_4.c -o test_laplace_jacobi_4-gco.exe -lm
#gcc -O3 -march=native -mfpmath=sse test_laplace_jacobi_4.c -o test_laplace_jacobi_4-gco.exe -lm

for i in `seq 2 $max`
do
    ./test_laplace_jacobi_4-gco.exe 100
    ./test_laplace_jacobi_4-gco.exe 150
    ./test_laplace_jacobi_4-gco.exe 200
done


echo '--------------------------------------------------'
echo 'gcc - Munchausen Number: Regular'
echo '--------------------------------------------------'

gcc test_munchausen_number.c -o test_munchausen_number-gcr.exe -lm

for i in `seq 2 $max`
do
    ./test_munchausen_number-gcr.exe
done


echo '--------------------------------------------------'
echo 'gcc - Munchausen Number: Optimized'
echo '--------------------------------------------------'

gcc -Ofast test_munchausen_number.c -o test_munchausen_number-gco.exe -lm

for i in `seq 2 $max`
do
./test_munchausen_number-gco.exe
done

echo '--------------------------------------------------'
echo 'gcc - Pernicious Number: Regular'
echo '--------------------------------------------------'

gcc test_pernicious_numbers.c -o test_pernicious_numbers-gcr.exe -lm

for i in `seq 2 $max`
do
./test_pernicious_numbers-gcr.exe 100000
done

echo '--------------------------------------------------'
echo 'gcc - Pernicious Number: Optimized'
echo '--------------------------------------------------'

gcc -Ofast test_pernicious_numbers.c -o test_pernicious_numbers-gco.exe -lm

for i in `seq 2 $max`
do
    ./test_pernicious_numbers-gco.exe 100000
done


echo '--------------------------------------------------'
echo 'gcc - Creating statistics'
echo '--------------------------------------------------'

gcc benchmark.c -o benchmark.exe -lm

./benchmark.exe


ELAPSED="Elapsed: $(($SECONDS / 3600))hrs $((($SECONDS / 60) % 60))min $(($SECONDS % 60))sec"
echo $ELAPSED

echo '--------------------------------------------------'
echo 'gcc - Saving runtime'
echo '--------------------------------------------------'

gcc save_time.c -o save_time.exe -lm 

./save_time.exe $(($SECONDS / 3600)) $((($SECONDS / 60) % 60)) $(($SECONDS % 60))


echo '__________________________________________________'
echo 'Delete all executables'
echo '__________________________________________________'
rm -f *exe



